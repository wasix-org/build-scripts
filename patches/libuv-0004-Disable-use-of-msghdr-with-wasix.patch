From 3f1999bca30d593c713cb6840fb5532c035468f3 Mon Sep 17 00:00:00 2001
From: Arshia Ghafoori <arshia001@live.com>
Date: Tue, 8 Jul 2025 10:59:35 +0200
Subject: [PATCH 4/9] Disable use of msghdr with wasix

---
 src/unix/core.c   |  3 ++-
 src/unix/stream.c | 19 ++++++++++++++++++-
 2 files changed, 20 insertions(+), 2 deletions(-)

diff --git a/src/unix/core.c b/src/unix/core.c
index bd51b69b..bd70442a 100644
--- a/src/unix/core.c
+++ b/src/unix/core.c
@@ -722,7 +722,8 @@ ssize_t uv__recvmsg(int fd, struct msghdr* msg, int flags) {
     defined(__FreeBSD__)   || \
     defined(__NetBSD__)    || \
     defined(__OpenBSD__)   || \
-    defined(__linux__)
+    defined(__linux__)     || \
+    defined(__wasi__)
   ssize_t rc;
   rc = recvmsg(fd, msg, flags | MSG_CMSG_CLOEXEC);
   if (rc == -1)
diff --git a/src/unix/stream.c b/src/unix/stream.c
index 18763b47..df7bb6d4 100644
--- a/src/unix/stream.c
+++ b/src/unix/stream.c
@@ -60,6 +60,7 @@ struct uv__stream_select_s {
 };
 #endif /* defined(__APPLE__) */
 
+#ifndef __wasi__ /* WASIX does not support msghdr */
 union uv__cmsg {
   struct cmsghdr hdr;
   /* This cannot be larger because of the IBMi PASE limitation that
@@ -69,6 +70,7 @@ union uv__cmsg {
 };
 
 STATIC_ASSERT(256 == sizeof(union uv__cmsg));
+#endif
 
 static void uv__stream_connect(uv_stream_t*);
 static void uv__write(uv_stream_t* stream);
@@ -778,6 +780,7 @@ static int uv__try_write(uv_stream_t* stream,
    * inside the iov each time we write. So there is no need to offset it.
    */
   if (send_handle != NULL) {
+  #ifndef __wasi__ /* WASIX does not support msghdr */
     int fd_to_send;
     struct msghdr msg;
     union uv__cmsg cmsg;
@@ -808,6 +811,10 @@ static int uv__try_write(uv_stream_t* stream,
     do
       n = sendmsg(uv__stream_fd(stream), &msg, 0);
     while (n == -1 && errno == EINTR);
+#else
+    /* WASI does not support msghdr. */
+    return UV_ENOSYS;
+#endif
   } else {
     do
       n = uv__writev(uv__stream_fd(stream), iov, iovcnt);
@@ -977,7 +984,7 @@ static int uv__stream_queue_fd(uv_stream_t* stream, int fd) {
   return 0;
 }
 
-
+#ifndef __wasi__ /* WASIX does not support msghdr */
 static int uv__stream_recv_cmsg(uv_stream_t* stream, struct msghdr* msg) {
   struct cmsghdr* cmsg;
   char* p;
@@ -1020,13 +1027,16 @@ static int uv__stream_recv_cmsg(uv_stream_t* stream, struct msghdr* msg) {
 
   return err;
 }
+#endif
 
 
 static void uv__read(uv_stream_t* stream) {
   uv_buf_t buf;
   ssize_t nread;
+#ifndef __wasi__ /* WASIX does not support msghdr */
   struct msghdr msg;
   union uv__cmsg cmsg;
+#endif
   int count;
   int err;
   int is_ipc;
@@ -1065,6 +1075,7 @@ static void uv__read(uv_stream_t* stream) {
       }
       while (nread < 0 && errno == EINTR);
     } else {
+#ifndef __wasi__ /* WASIX does not support msghdr. */
       /* ipc uses recvmsg */
       msg.msg_flags = 0;
       msg.msg_iov = (struct iovec*) &buf;
@@ -1079,6 +1090,10 @@ static void uv__read(uv_stream_t* stream) {
         nread = uv__recvmsg(uv__stream_fd(stream), &msg, 0);
       }
       while (nread < 0 && errno == EINTR);
+#else
+      nread = -1;
+      errno = UV_ENOSYS;
+#endif
     }
 
     if (nread < 0) {
@@ -1115,11 +1130,13 @@ static void uv__read(uv_stream_t* stream) {
       ssize_t buflen = buf.len;
 
       if (is_ipc) {
+#ifndef __wasi__ /* WASIX does not support msghdr */
         err = uv__stream_recv_cmsg(stream, &msg);
         if (err != 0) {
           stream->read_cb(stream, err, &buf);
           return;
         }
+#endif
       }
 
 #if defined(__MVS__)
-- 
2.48.1

